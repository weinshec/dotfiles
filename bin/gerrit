#!/usr/bin/env python
# encoding: utf-8

""" gerrit - tiny gerrit helper

Usage:
    gerrit fetch [options] <changeset>
    gerrit -h | --help

Options:
    -h, --help      Show this screen
    --debug         Enable debug output
"""

import docopt
import json
import logging
import subprocess
import sys


def invoke(cmd, exit_on_error=False):
    try:
        logging.debug("Invoke cmd: {}".format(cmd))
        process_result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except subprocess.CalledProcessError:
        logging.error("command failed with: {}\n\n{}".format(
            process_result.returncode, process_result.stderr.decode("utf-8")))
        if exit_on_error:
            sys.exit(1)

    logging.debug("command succeded with: {}\n{}".format(
        process_result.returncode, process_result.stdout.decode("utf-8")))
    return process_result



def fetch(args):
    query_cmd = [
        "ssh",
        "-p 29418",
        "gerrit.int.esrlabs.com",
        "gerrit query",
        "--current-patch-set",
        "--format=JSON",
        "change:{}".format(args["<changeset>"]),
    ]

    query_cmd_result = invoke(query_cmd, exit_on_error=True)
    patchset = json.loads(query_cmd_result.stdout.split(b'\n')[0])

    if patchset.get("type") == "error":
        logging.error("Fetching patchset was not successful!")
        logging.error(patchset.get("message", "unknown error"))
        sys.exit(1)

    patchset_ref = patchset["currentPatchSet"]["ref"]

    logging.info("Fetched patchset {}".format(patchset_ref))

    invoke(["git", "fetch", "origin", patchset_ref])
    invoke(["git", "checkout", "FETCH_HEAD"])


if __name__ == '__main__':
    args = docopt.docopt(__doc__)

    logLevel = logging.DEBUG if args.get("--debug", False) else logging.INFO
    logging.basicConfig(format="[%(levelname)s]: %(message)s", level=logLevel)

    if args["fetch"]:
        fetch(args)
